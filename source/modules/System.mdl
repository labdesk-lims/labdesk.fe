Attribute VB_Name = "System"
'################################################################################################
' This module encompasses operating system funtions
'################################################################################################

Option Compare Database
Option Explicit

Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
    (ByVal hWnd As Long, ByVal lpOperation As String, ByVal lpFile As String, _
    ByVal lpParameters As String, ByVal lpDirectory As String, _
    ByVal nShowCmd As Long) As Long

Public Function fShellRun(ByVal sCommandStringToExecute As String)
'-------------------------------------------------------------------------------
' Function:  fShellRun
' Date:      2022 May
' Purpose:   This function will accept a string as a DOS command to execute.
'            It will then execute the command in a shell, and returns the command
'            return code to the caller.
' In:        -
' Out:       Connection Valid (T/F)
'-------------------------------------------------------------------------------
    Dim oShellObject

    Set oShellObject = CreateObject("Wscript.Shell")

    On Error Resume Next
    fShellRun = oShellObject.Run(sCommandStringToExecute, 0, True)
End Function

Public Function CleanCache() As Boolean
'-------------------------------------------------------------------------------
'Function:          CleanCache
'Date:              2022 March
'Purpose:           Clean the cache pictures have been saved to
'In:
' -> fref:          BLOB field of the serialized data
' -> pref           Picture field to present the picture
'Out:               Done (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error
    Dim oShell As Object
    Dim oFSO As Object
    Dim fpath As String
    
    Set oShell = CreateObject("WScript.Shell")
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    
    fpath = oShell.ExpandEnvironmentStrings("%USERPROFILE%\") + config.CacheFolder
    If oFSO.FolderExists(fpath) Then Kill fpath + "\*.*"
    
    CleanCache = True

Exit_Function:
    Set oShell = Nothing
    Set oFSO = Nothing
    Exit Function
Catch_Error:
    'MsgBox "Error (mdlSystem - CleanCache): " & Err.description, vbCritical, "Error"
    Resume Exit_Function
End Function

Public Function RunTimeMode() As Boolean
'-------------------------------------------------------------------------------
'Function:          RunTimeMode
'Date:              2023 October
'Purpose:           Check if runtime mode is switched on
'Out:               Switched On (T/F)
'-------------------------------------------------------------------------------
    RunTimeMode = SysCmd(acSysCmdRuntime)
End Function

Public Function FileExists(ByVal path_ As String) As Boolean
    FileExists = (Len(Dir(path_)) > 0)
End Function
    
Public Function GetFileName(ByVal strFile As String) As String
    Dim fso As New FileSystemObject
    GetFileName = fso.GetFileName(strFile)
End Function
 
Public Function GetFileExtension(ByVal strFile As String) As String
    Dim fso As New FileSystemObject
    GetFileExtension = fso.GetExtensionName(strFile)
End Function

Function GetProcessorId(Optional sHost As String = ".") As String
'--------------------------------------------------------------------------------------------
'Function:          GetProcessorId
'Date:              2024 January
'Purpose:           Retrieve the specified PC's Processor(s) Id(s)
'Out:               Processor id
' sHost:            Name/IP Address of the PC to query assuming you have the rights to do so
'                   optional, so by leaving it blank it will query the local computer
'--------------------------------------------------------------------------------------------
    On Error GoTo Error_Handler
    Dim oWMI                  As Object           'WMI object to query about the PC's OS
    Dim oProcessors           As Object           'Collection of OSs
    Dim oProcessor            As Object           'Individual OS

    Set oWMI = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & sHost & "\root\cimv2")
    Set oProcessors = oWMI.ExecQuery("SELECT ProcessorId FROM Win32_Processor")

    For Each oProcessor In oProcessors
        GetProcessorId = GetProcessorId & oProcessor.ProcessorId & ","
    Next
    If Right(GetProcessorId, 1) = "," Then GetProcessorId = Left(GetProcessorId, Len(GetProcessorId) - 1)

Error_Handler_Exit:
    On Error Resume Next
    If Not oProcessor Is Nothing Then Set oProcessor = Nothing
    If Not oProcessors Is Nothing Then Set oProcessors = Nothing
    If Not oWMI Is Nothing Then Set oWMI = Nothing
    Exit Function

Error_Handler:
    MsgBox "The following error has occurred." & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Error Source: GetProcessorId" & vbCrLf & _
           "Error Description: " & Err.description, _
           vbCritical, "An Error has Occurred!"
    Resume Error_Handler_Exit
End Function

