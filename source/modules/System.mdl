Attribute VB_Name = "System"
'################################################################################################
' This module encompasses operating system funtions
'################################################################################################

Option Compare Database
Option Explicit

Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
    (ByVal hWnd As Long, ByVal lpOperation As String, ByVal lpFile As String, _
    ByVal lpParameters As String, ByVal lpDirectory As String, _
    ByVal nShowCmd As Long) As Long

Public Function fShellRun(ByVal sCommandStringToExecute As String)
'-------------------------------------------------------------------------------
' Function:  fShellRun
' Date:      2022 May
' Purpose:   This function will accept a string as a DOS command to execute.
'            It will then execute the command in a shell, and returns the command
'            return code to the caller.
' In:        -
' Out:       Connection Valid (T/F)
'-------------------------------------------------------------------------------
    Dim oShellObject

    Set oShellObject = CreateObject("Wscript.Shell")

    On Error Resume Next
    fShellRun = oShellObject.Run(sCommandStringToExecute, 0, True)
End Function

Public Function CleanCache() As Boolean
'-------------------------------------------------------------------------------
'Function:          CleanCache
'Date:              2022 March
'Purpose:           Clean the cache pictures have been saved to
'In:
' -> fref:          BLOB field of the serialized data
' -> pref           Picture field to present the picture
'Out:               Done (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error
    Dim oShell As Object
    Dim oFSO As Object
    Dim fpath As String
    
    Set oShell = CreateObject("WScript.Shell")
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    
    fpath = oShell.ExpandEnvironmentStrings("%USERPROFILE%\") + config.CacheFolder
    If oFSO.FolderExists(fpath) Then Kill fpath + "\*.*"
    
    CleanCache = True

Exit_Function:
    Set oShell = Nothing
    Set oFSO = Nothing
    Exit Function
Catch_Error:
    'MsgBox "Error (mdlSystem - CleanCache): " & Err.description, vbCritical, "Error"
    Resume Exit_Function
End Function

Public Function RunTimeMode() As Boolean
'-------------------------------------------------------------------------------
'Function:          RunTimeMode
'Date:              2023 October
'Purpose:           Check if runtime mode is switched on
'Out:               Switched On (T/F)
'-------------------------------------------------------------------------------
    RunTimeMode = SysCmd(acSysCmdRuntime)
End Function

Public Function httpGET(fn As String) As String
'-------------------------------------------------------------------------------
'Function:          httpGET
'Date:              2024 February
'Purpose:           send http get request
'fn:                command string
'Out:               http response text
'-------------------------------------------------------------------------------
    Dim col As Collection
    
    Dim pHtml As Variant
    pHtml = fn
    Dim oHttp As Object
    Set oHttp = CreateObject("Microsoft.XMLHTTP")
    Call oHttp.Open("GET", fn, False)
    Call oHttp.Send("")
    httpGET = oHttp.ResponseText

    Set oHttp = Nothing
End Function

Public Function FileExists(ByVal path_ As String) As Boolean
    FileExists = (Len(Dir(path_)) > 0)
End Function
    
Public Function GetFileName(ByVal strFile As String) As String
    Dim fso As New FileSystemObject
    GetFileName = fso.GetFileName(strFile)
End Function
 
Public Function GetFileExtension(ByVal strFile As String) As String
    Dim fso As New FileSystemObject
    GetFileExtension = fso.GetExtensionName(strFile)
End Function

Sub DeleteFile(ByVal FileToDelete As String)
   If FileExists(FileToDelete) Then
      SetAttr FileToDelete, vbNormal
      Kill FileToDelete
   End If
End Sub
