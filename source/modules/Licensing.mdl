Attribute VB_Name = "Licensing"
'################################################################################################
' This class module will activate users by licensing based on a unique identifier
' in the table users. The activation is performed manually.
'################################################################################################

Option Compare Database
Option Explicit

Public Function ActivateUser(ByVal userid As Long) As Boolean
On Error GoTo Catch_Error
    Dim db As database
    Dim rs As Recordset

    Set db = CurrentDb()
    Set rs = db.OpenRecordset("SELECT uid FROM users WHERE id = " & userid)
    
    If IsNull(rs(0)) Then Err.Raise vbObjectError + 513, "", "UID not found in table users"
    
    CurrentDb.Execute "UPDATE users SET licence = '" & StoreEncryptAES(rs(0), config.EncryptionKey & CStr(userid), 1) & "' WHERE id = " & userid, dbSeeChanges
    
    ActivateUser = True
    
Exit_Function:
    Set db = Nothing
    Set rs = Nothing
    Exit Function
Catch_Error:
    MsgBox Err.description, vbCritical, "Critical error during activation"
    Resume Exit_Function
End Function

Public Function UserHasLicence(ByVal userid As Long) As Boolean
On Error GoTo Catch_Error
    Dim db As database
    Dim rs_lc As Recordset
    Dim rs_uid As Recordset
    
    Set db = CurrentDb()
    Set rs_lc = db.OpenRecordset("SELECT licence FROM users WHERE id = " & userid)
    Set rs_uid = db.OpenRecordset("SELECT uid FROM users WHERE id = " & userid)
    
    If IsNull(rs_lc(0)) Then Err.Raise vbObjectError + 513, "", "Licence not found in table users"
    If IsNull(rs_uid(0)) Then Err.Raise vbObjectError + 513, "", "UID not found in table users"
    If RetrieveDecryptAES(rs_lc(0), config.EncryptionKey & CStr(userid), 1, True) <> rs_uid(0) Then Err.Raise vbObjectError + 513, "", "Not a valid licence."
    
    UserHasLicence = True
    
Exit_Function:
    Set db = Nothing
    Set rs_lc = Nothing
    Set rs_uid = Nothing
    Exit Function
Catch_Error:
    UserHasLicence = False
    Resume Exit_Function
End Function

Public Sub CreateLicenceFile(ByVal filename As String, ByVal licensee As String, ByVal details As String, ByVal seats As Integer, ByVal licence_key As Variant, ByVal devmode As Boolean, Optional ByVal authentication As String)
    Dim json As String
    Dim JsonTS As TextStream
    Dim fso As New FileSystemObject
    
    If authentication <> "C3PO" Then Err.Raise vbObjectError + 513, "", "Authentication failed."
    
    If IsNull(config.EncryptionKey) Or config.EncryptionKey = "" Then Err.Raise vbObjectError + 513, , ", Encryption key must not be null or empty."

    json = StoreEncryptAES("{""licensee"":""" & licensee & """,""details"":""" & details & """,""devmode"":" & CInt(devmode) & ",""licence_key"":""" & licence_key & """,""seats"":" & seats & "}", config.EncryptionKey, 1)
    Set JsonTS = fso.CreateTextFile(Application.CurrentProject.Path & "\" & filename, True)
    JsonTS.Write (json)
    JsonTS.Close
End Sub

Public Function GetLicenceFromFile(ByVal filename As String) As Variant
On Error GoTo Catch_Error
    Dim fso As New FileSystemObject
    Dim JsonTS As TextStream
    Dim jsonText As String
    Dim Parsed As Dictionary
    Dim json As Object
    
    ' Read .json file
    Set JsonTS = fso.OpenTextFile(Application.CurrentProject.Path & "\" & filename, ForReading)
    jsonText = JsonTS.ReadAll
    JsonTS.Close
    
    Set GetLicenceFromFile = JsonConverter.ParseJson(RetrieveDecryptAES(jsonText, config.EncryptionKey, 1, True))
    
Exit_Function:
    Exit Function
Catch_Error:
    GetLicenceFromFile = Null
    Resume Exit_Function
End Function

Public Sub UploadLicenceFromFile(ByVal filename As String)
    Dim fso As New FileSystemObject
    Dim JsonTS As TextStream
    Dim jsonText As String
    
    ' Read .json file
    Set JsonTS = fso.OpenTextFile(Application.CurrentProject.Path & "\" & filename, ForReading)
    jsonText = JsonTS.ReadAll
    JsonTS.Close
    
    ' Check licence before activation
    If Not ValidLicence(JsonConverter.ParseJson(RetrieveDecryptAES(jsonText, config.EncryptionKey, 1, True))("licence_key")) Then Err.Raise vbObjectError + 513, , "Licence deactivated or unknown. Contact software vendor."
    
    ' Upload licence to table setup
    CurrentDb.Execute "UPDATE dbsetup SET licence = '" & jsonText & "'"
End Sub

Public Function GetLicenceFromSetup() As Variant
On Error GoTo Catch_Error
    Dim db As database
    Dim rs As Recordset
    
    ' Get licence from table setup
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("SELECT TOP 1 licence FROM dbsetup", dbOpenDynaset, dbSeeChanges)
    
    ' Return licence
    If rs.EOF Or rs.BOF Then
        GoTo Exit_Function
    Else
        Set GetLicenceFromSetup = JsonConverter.ParseJson(RetrieveDecryptAES(rs!licence, config.EncryptionKey, 1, True))
    End If
    
Exit_Function:
    Set db = Nothing
    Set rs = Nothing
    Exit Function
Catch_Error:
    GetLicenceFromSetup = Null
    Resume Exit_Function
End Function

Public Function ValidLicence(ByVal licence_key As String) As Boolean
    Dim jsonText As String
    
    If Not PingOk("licence.labdesk.net") Then Err.Raise vbObjectError + 513, "", "Licence server unreachable."
    jsonText = httpGET("http://licence.labdesk.net/index.php/licence/get?licence_key=" & licence_key)
    jsonText = Mid(jsonText, 2, Len(jsonText) - 2)
    ValidLicence = JsonConverter.ParseJson(jsonText)("licence_active")
End Function
