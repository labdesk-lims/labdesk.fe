'################################################################################################
' This class module will activate users by licensing based on a unique identifier
' in the table users. The activation is performed manually.
'################################################################################################

Option Compare Database
Option Explicit

Public Function ActivateUser(ByVal userid As Integer) As Boolean
On Error GoTo Catch_Error
    Dim db As database
    Dim rs As Recordset

    Set db = CurrentDb()
    Set rs = db.OpenRecordset("SELECT uid FROM users WHERE id = " & userid)
    
    If IsNull(rs(0)) Then Err.Raise vbObjectError + 513, "", "UID not found in table users"
    
    CurrentDb.Execute "UPDATE users SET licence = '" & StoreEncryptAES(rs(0), config.EncryptionKey & CStr(userid), 1) & "' WHERE id = " & userid, dbSeeChanges
    
    ActivateUser = True
    
Exit_Function:
    Set db = Nothing
    Set rs = Nothing
    Exit Function
Catch_Error:
    MsgBox Err.description, vbCritical, "Critical error during activation"
    Resume Exit_Function
End Function

Public Function UserHasLicence(ByVal userid As Integer) As Boolean
On Error GoTo Catch_Error
    Dim db As database
    Dim rs_lc As Recordset
    Dim rs_uid As Recordset
    
    Set db = CurrentDb()
    Set rs_lc = db.OpenRecordset("SELECT licence FROM users WHERE id = " & userid)
    Set rs_uid = db.OpenRecordset("SELECT uid FROM users WHERE id = " & userid)
    
    If IsNull(rs_lc(0)) Then Err.Raise vbObjectError + 513, "", "Licence not found in table users"
    If IsNull(rs_uid(0)) Then Err.Raise vbObjectError + 513, "", "UID not found in table users"
    If RetrieveDecryptAES(rs_lc(0), config.EncryptionKey & CStr(userid), 1, True) <> rs_uid(0) Then Err.Raise vbObjectError + 513, "", "Not a valid licence."
    
    UserHasLicence = True
    
Exit_Function:
    Set db = Nothing
    Set rs_lc = Nothing
    Set rs_uid = Nothing
    Exit Function
Catch_Error:
    UserHasLicence = False
    Resume Exit_Function
End Function

Public Sub CreateLicenceFile(ByVal fileName As String, ByVal licensee As String, ByVal details As String, ByVal seats As Integer)
    Dim Json As String
    Dim JsonTS As TextStream
    Dim FSO As New FileSystemObject

    Json = StoreEncryptAES("{""licensee"":""" & licensee & """,""details"":""" & details & """,""seats"":" & seats & "}", config.EncryptionKey, 1)
    
    Set JsonTS = FSO.CreateTextFile(Application.CurrentProject.Path & "\" & fileName, True)
    JsonTS.Write (Json)
    JsonTS.Close
End Sub

Public Function GetLicenceByFile(ByVal fileName As String) As Object
On Error GoTo Catch_Error
    Dim FSO As New FileSystemObject
    Dim JsonTS As TextStream
    Dim JsonText As String
    Dim Parsed As Dictionary
    Dim Json As Object
    
    ' Read .json file
    Set JsonTS = FSO.OpenTextFile(Application.CurrentProject.Path & "\" & fileName, ForReading)
    JsonText = JsonTS.ReadAll
    JsonTS.Close
    
    Set GetLicenceByFile = JsonConverter.ParseJson(RetrieveDecryptAES(JsonText, config.EncryptionKey, 1, True))
    
Exit_Function:
    Set JsonTS = Nothing
    Set Json = Nothing
    Exit Function
Catch_Error:
    Resume Exit_Function
End Function