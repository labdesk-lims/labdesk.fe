'################################################################################################
' This module will initialize the application to work properly with all components of relevance.
' InitApp will be called by the macro AutoExec during startup.
'################################################################################################

Option Compare Database
Option Explicit

' -----------------------------------------------------------------------------------------------
' Public variables and Global constants
' -----------------------------------------------------------------------------------------------

' Database connection timeout
Public Const pConnectionTimeout = 3

' Application title shown as form title
Public Const pAppTitle = "LABDESK LIMS"

' Semantic Versioning according to https://semver.org/
' MAJOR-MINOR-PATCH
Public Const pBeVersion = "v1.0.0" 'Backend version
Public Const pFeVersion = "v1.0.0" 'Frontend version
Public Const pReportTemplate = "labreport_single" 'Separate report names using comma (e.g A,B,C,...)
Public Const pLabelTemplate = "sticker_pdf,sticker_zebra_103x199" 'Separate label names using comma (e.g A,B,C,...)

' Cache folder setting
Public Const pCacheFolder = ".labdesk" 'The local user folder will be used for labdesk

' Demo mode
Public Const pDemoMode = False

' Local refresh timer in seconds
Public Const pRefresh = 60

' Remote tables to be linked
Global DSNLessTables As Variant

' -----------------------------------------------------------------------------------------------
' Any code goes from here
' -----------------------------------------------------------------------------------------------

Public Function AddAppProperty(strName As String, varType As Variant, varValue As Variant) As Boolean
'-------------------------------------------------------------------------------
' Function:     AddAppProperty
' Date:         2022 May
' Purpose:      Set an application property
' In:
' -> title:     Title of the application
' Out:          Done (T/F)
'-------------------------------------------------------------------------------
Dim dbs As Object, prp As Variant
Const conPropNotFoundError = 3270
 
Set dbs = CurrentDb
On Error GoTo Catch_Error
dbs.Properties(strName) = varValue
AddAppProperty = True
 
Exit_Function:
    Exit Function
 
Catch_Error:
    If Err = conPropNotFoundError Then
        Set prp = dbs.CreateProperty(strName, varType, varValue)
        dbs.Properties.Append prp
        Resume
    Else
        AddAppProperty = False
        Resume Exit_Function
    End If
End Function

Public Sub HideNavPane(bVisible As Boolean)
'-------------------------------------------------------------------------------
' Function:     HideNavPane
' Date:         2022 January
' Purpose:      Control the visibility of the Access Navigation Pane
' Parameters:
' -> bVisible   True/False - whether the Nav Pane should be visible or not
' Out:          -
'-------------------------------------------------------------------------------
    On Error GoTo Catch_Error
 
    If SysCmd(acSysCmdRuntime) = False Then
        If bVisible = True Then
            '            DoCmd.SelectObject acTable, , True
            DoCmd.SelectObject acModule, , True
        Else
            '            DoCmd.SelectObject acTable, , True
            DoCmd.SelectObject acModule, , True
            DoCmd.RunCommand acCmdWindowHide
        End If
    End If
 
Exit_Function:
    Exit Sub
Catch_Error:
    MsgBox "Error (mdlAutoExec - HideNavPane): " & Err.description, vbCritical, "Error"
    Resume Exit_Function
End Sub

Function DisableShift()
'-------------------------------------------------------------------------------
' Function:     HDisableShift
' Date:         2022 January
' Purpose:      This function disable the shift at startup
' Parameters:   -
' Out:          -
'-------------------------------------------------------------------------------

On Error GoTo errDisableShift

Dim db As dao.database
Dim prop As dao.Property
Const conPropNotFound = 3270

Set db = CurrentDb()

'This next line disables the shift key on startup.
db.Properties("AllowByPassKey") = False

'The function is successful.
Exit Function

errDisableShift:
'The first part of this error routine creates the "AllowByPassKey
'property if it does not exist.
If Err = conPropNotFound Then
Set prop = db.CreateProperty("AllowByPassKey", _
dbBoolean, False)
db.Properties.Append prop
Resume Next
Else
MsgBox "Function 'DisableShift' did not complete successfully."
Exit Function
End If
End Function

Function EnableShift()
'-------------------------------------------------------------------------------
' Function:     HDisableShift
' Date:         2022 January
' Purpose:      This function enables the shift at startup
' Parameters:   -
' Out:          -
'-------------------------------------------------------------------------------

On Error GoTo errEnableShift

Dim db As dao.database
Dim prop As dao.Property
Const conPropNotFound = 3270

Set db = CurrentDb()

'This next line of code disables the SHIFT key on startup.
db.Properties("AllowByPassKey") = True

'function successful
Exit Function

errEnableShift:
'The first part of this error routine creates the "AllowByPassKey
'property if it does not exist.
If Err = conPropNotFound Then
Set prop = db.CreateProperty("AllowByPassKey", _
dbBoolean, True)
db.Properties.Append prop
Resume Next
Else
MsgBox "Function 'EnableShift' did not complete successfully."
Exit Function
End If
End Function

Public Function InitApp() As Boolean
'-------------------------------------------------------------------------------
' Function:     InitApp
' Date:         2022 January
' Purpose:      Init the application settings
' Parameters:   -
' Out:          Done (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error

    DSNLessTables = Array( _
    "filter", "translation", "setup", _
    "contact", "laboratory", "customer", "manufacturer", "smppoint", "smpcontainer", "smpmatrix", "material", _
    "cfield", "cvalidate", "condition", "uncertainty", "analysis", "attribute", "method_analysis", "method", "qualification", "instrument_method", "department", "workplace", "instrument", "certificate", "attachment", "instype", "supplier", _
    "request", "measurement_cfield", "measurement", "measurement_condition", "view_request_measurement", _
    "profile_analysis", "profile", "request_analysis", "step", "state", "workflow", "smptype", "smpcondition", "smppreservation", "priority", "technique", _
    "batch", "btcposition", "storage", "strposition", "handbook", _
    "project", "project_member", "formulation", "component", "task", "workload", "view_task", _
    "view_measurement", _
    "users", "role", "role_permission", "permission", "traversal", "audit", "spa", "columns", _
    "view_labreport_details", _
    "view_attachment_revision", _
    "mailqueue" _
    )
    
    'Try to attach tables
    If ConnectDb(GetDbSetting("server"), GetDbSetting("database"), DSNLessTables, GetDbSetting("user"), GetDbSetting("password")) = False Then
        Err.Raise vbObjectError + 513, , "Connecting to database failed."
    End If
    
    ' Update local tables
    UpdateLocalTables
    
    'Init application (initialization routine needs to be called just once for setup reasons)
    If GetFieldValue("dbsetup", "sysinit", 1) = True Then
        If MsgBox("Press OK to initialize application. This may take a while.", vbOKCancel, "Information") = vbOK Then
            sysinit
            MsgBox "System initialization finished. Restart application to proceed.", vbInformation, "Information"
        End If
        Exit Function
    End If
    
    'Clean Cache (stored in the user folder under pCacheFolder)
    CleanCache
    
    'Init context menus
    InitContextMenuStd
    InitContextMenuStdDpl
    InitContextMenuRqst
    InitContextMenuFlt
    InitContextMenuFile
    InitContextMenuSubStd
    
    'Check Version (raise error if backend does not match)
    If GetBeVersion() <> pBeVersion Then
        MsgBox "Error (mdlAutoExec - InitApp): Backend version not supported. (Actual: " & GetBeVersion() & " | Required: " & pBeVersion & ")", vbCritical, "Error"
        Err.Raise vbObjectError + 513, , "Backend version not supported. (Actual: " & GetBeVersion() & " | Required: " & pBeVersion & ")"
    End If
    
    'Check if user exists otherwise add
    AddUser
    
    'Open desktop tab
    'If Application.SysCmd(acSysCmdGetObjectState, acForm, "desktop") <> acObjStateOpen Then DoCmd.OpenForm "desktop", acNormal, , , acFormReadOnly, acWindowNormal
    
    'Interface cosmetics
    AddAppProperty "AppTitle", dbText, pAppTitle
    Application.RefreshTitleBar
    SysCmd acSysCmdSetStatus, "User: " & GetUserName()
    HideNavPane GetDbSetting("navpane")
    
    'Open the closing event form
    DoCmd.OpenForm "*background_worker_form", acNormal, , , acFormReadOnly, acWindowNormal
    Forms("*background_worker_form").visible = False
    
    'Show licence message box
    If pDemoMode = True Then MsgBox "This is demonstration software. Commercial use prohibited." & vbCrLf & "Report any violation to hello@labdesk.net" & vbCrLf & vbCrLf & "EULA: labdesk.net/licence", vbInformation, "Information"
    
    InitApp = True
    
Exit_Function:
    Exit Function
Catch_Error:
    InitApp = False
    DoCmd.OpenForm "dbsetup", acNormal, , , acFormEdit
    Resume Exit_Function
End Function