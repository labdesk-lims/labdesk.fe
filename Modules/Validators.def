 '################################################################################################
' Here you will find functions to validate data of fields
'################################################################################################

Option Compare Database
Option Explicit

Public Function IsEqual(value As Variant, comparison As Variant) As Boolean
    If value = comparison Then IsEqual = True Else IsEqual = False
End Function

Public Function ValidEmailAddress(ByVal strEmailAddress As String) As Boolean
'-------------------------------------------------------------------------------
'Function:          ValidateEmailAddress
'Date:              2021 October
'Purpose:           Validate email address
'In:                Email address as string
'Out:               Valid (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error
    
    Dim objRegExp As New RegExp
    Dim blnIsValidEmail As Boolean
    
    If IsNull(strEmailAddress) Then Resume Exit_Function
    
    objRegExp.IgnoreCase = True
    objRegExp.global = True
    objRegExp.Pattern = "^([a-zA-Z0-9_\-\.]+)@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$"
    
    blnIsValidEmail = objRegExp.test(strEmailAddress)
    ValidEmailAddress = blnIsValidEmail
      
Exit_Function:
    Set objRegExp = Nothing
    Exit Function
Catch_Error:
    Resume Exit_Function
End Function

Public Function ValidEmailArray(ByVal strEmailArray As String) As Boolean
'-------------------------------------------------------------------------------
'Function:          ValidateEmailArray
'Date:              2021 October
'Purpose:           Validate email array (like: a@b.de;c@de.en)
'In:                Email array as string
'Out:               Valid (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error
    Dim cc_email As Variant
    Dim s As Variant
    Dim b As Boolean
    
    cc_email = Split(strEmailArray, ";")
    
    b = True
    For Each s In cc_email
        b = b And ValidEmailAddress(s)
    Next

    ValidEmailArray = b
    
Exit_Function:
    Exit Function
 
Catch_Error:
    Resume Exit_Function
End Function

Public Function IsValidFolderName(ByVal sFolderName As String) As Boolean
'-------------------------------------------------------------------------------
'Function:          IsValidFileNameOrPath
'Date:              2021 October
'Purpose:           Validate folder name
'In:                Folder name
'Out:               Valid (T/F)
'-------------------------------------------------------------------------------
On Error GoTo Catch_Error
    Dim objRegExp As New RegExp
    
    'Check to see if any illegal characters have been used
    objRegExp.Pattern = "[&lt;&gt;:""/\\\|\?\*]"
    IsValidFolderName = objRegExp.test(sFolderName)
    
    'Ensure the folder name does end with a . or a blank space
    If Right(sFolderName, 1) = "." Then IsValidFolderName = False
    If Right(sFolderName, 1) = " " Then IsValidFolderName = False
    
Exit_Function:
    Set objRegExp = Nothing
    Exit Function
Catch_Error:
    Resume Exit_Function
End Function

Public Function SubstNull(ByVal value As Variant, ByVal subst As Variant) As Variant
    If IsNull(value) Then
        SubstNull = subst
    Else
        SubstNull = value
    End If
End Function

Private Function DecodeBase64(ByVal strData As String) As Byte()
    Dim objXML As MSXML2.DOMDocument60
    Dim objNode As MSXML2.IXMLDOMElement
   
    ' help from MSXML
    Set objXML = New MSXML2.DOMDocument60
    Set objNode = objXML.createElement("b64")
    objNode.DataType = "bin.base64"
    objNode.Text = strData
    DecodeBase64 = objNode.nodeTypedValue
   
    ' thanks, bye
    Set objNode = Nothing
    Set objXML = Nothing
End Function

Private Function EncodeBase64(ByRef arrData() As Byte) As String
    Dim objXML As MSXML2.DOMDocument60
    Dim objNode As MSXML2.IXMLDOMElement
   
    ' help from MSXML
    Set objXML = New MSXML2.DOMDocument60
   
    ' byte array to base64
    Set objNode = objXML.createElement("b64")
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeBase64 = objNode.Text

    ' thanks, bye
    Set objNode = Nothing
    Set objXML = Nothing
End Function

Public Function httpGET(fn As String) As String
    Dim col As Collection
    
    Dim pHtml As Variant
    pHtml = fn
    Dim oHttp As Object
    Set oHttp = CreateObject("Microsoft.XMLHTTP")
    Call oHttp.Open("GET", fn, False)
    Call oHttp.Send("")
    httpGET = oHttp.ResponseText

    Set oHttp = Nothing
End Function

Public Function IsSubForm(ByRef rfrm As Form) As Boolean
On Error GoTo Catch_Error
    IsSubForm = Not (rfrm.Parent Is Nothing)
    Exit Function
Catch_Error:
    IsSubForm = False
End Function

Public Function IsFormView(ByRef rfrm As Form) As Boolean
On Error GoTo Catch_Error
    IsFormView = (rfrm.CurrentView = 1)
    Exit Function
Catch_Error:
    IsFormView = False
End Function

Public Function SelectLabel() As Variant
    Dim rpt As AccessObject, db As Object, i As Integer, s As Variant
    
    Set db = Application.CurrentProject
    
    CurrentDb.Execute "DELETE * FROM keyvalue"
    
    i = 0
    For Each rpt In db.AllReports
        If InStr(1, rpt.name, config.LabelId, vbTextCompare) = 1 Then CurrentDb.Execute "INSERT INTO keyvalue (key, value_txt) VALUES(" & i & ",'" & rpt.name & "')"
        i = i + 1
    Next rpt
    
    DoCmd.OpenForm "_SelectDialog", acNormal, , , acFormEdit, acDialog, "SELECT value_txt, key FROM keyvalue"
    
    If Not IsNull(Forms("_SelectDialog").comboBox.Column(1)) Then
        SelectLabel = Forms("_SelectDialog").comboBox.Column(0)
    Else
        SelectLabel = Null
    End If
    
    DoCmd.Close acForm, "_SelectDialog", acSaveNo
End Function

Public Sub ComboBoxSearch(ByRef combo As comboBox, ByVal lookupField As String, ByVal pk As String)
'-------------------------------------------------------------------------------
'Function:          ComboBoxSearch
'Date:              2023 May
'Purpose:           Google like search for combobox
'In:
'-> combo           ComboBox object
'-> lookupField     Field to be selected for combobox
'-> pk              Primary key of table
'Out:               Valid (T/F)
'-------------------------------------------------------------------------------
    Dim strSql As String
    strSql = combo.RowSource
    combo.RowSource = "SELECT " & lookupField & ", " & pk & " FROM (" & Replace(strSql, ";", "") & ") WHERE " & lookupField & " Like '*" & combo.Text & "*'"
    'combo.Dropdown <- activate to open dropdown combobox automatically
End Sub